<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Assembly on Hanbin Zheng</title><link>https://hanbinzheng.github.io/categories/assembly/</link><description>Recent content in Assembly on Hanbin Zheng</description><generator>Hugo -- 0.149.0</generator><language>en-us</language><lastBuildDate>Mon, 26 May 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://hanbinzheng.github.io/categories/assembly/index.xml" rel="self" type="application/rss+xml"/><item><title>LC3 Brief Review</title><link>https://hanbinzheng.github.io/blog/lc3-brief-review/</link><pubDate>Mon, 26 May 2025 00:00:00 +0800</pubDate><guid>https://hanbinzheng.github.io/blog/lc3-brief-review/</guid><description>&lt;blockquote&gt;
&lt;p&gt;This is a brief review for some topics of ECE220.&lt;/p&gt;
&lt;p&gt;Since this website cannot render asm code blocks properly, I used nasm instead â€” though this is actually LC-3 assembly code.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="i-purpose-and-description"&gt;I. Purpose and Description&lt;/h2&gt;
&lt;h3 id="1-purpose"&gt;1. Purpose&lt;/h3&gt;
&lt;p&gt;This program serves as a review for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LC3 basics (including I/O)&lt;/li&gt;
&lt;li&gt;Run-time stack&lt;/li&gt;
&lt;li&gt;Recursion (LC3 implementation)&lt;/li&gt;
&lt;li&gt;Linked list (LC3 implementation)&lt;/li&gt;
&lt;li&gt;Binary tree (LC3 implementation)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="2-descriptions"&gt;2. Descriptions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;This file primarily serves as a direct LC-3 translation of a C program that prints a file directory structure.&lt;/li&gt;
&lt;li&gt;The content to be printed is pre-stored in specific data structures. The program prints this content to the console in a pre-order traversal with a specified output format (see desired output for details).&lt;/li&gt;
&lt;li&gt;To fully cover the previous purposes and simulate how C programs are translated into lower-level assembly language, all user-defined C functions are implemented on a run-time stack. Additionally, we&amp;rsquo;ve implemented our own &amp;ldquo;system call&amp;rdquo; equivalent to &amp;ldquo;OUT&amp;rdquo; and &amp;ldquo;PUTS&amp;rdquo; (corresponding to C&amp;rsquo;s &lt;code&gt;printf()&lt;/code&gt; function). We name them &amp;ldquo;PRINT_A_CHAR&amp;rdquo; and &amp;ldquo;PRINT_A_STRING&amp;rdquo; respectively. These subroutines don&amp;rsquo;t utilize a run-time stack, just as typical system calls in real-world machines. Their implementation is exactly the same as how LC-3 machine implements &amp;ldquo;OUT&amp;rdquo; and &amp;ldquo;PUTS&amp;rdquo; in its System Space (from &lt;code&gt;x0450&lt;/code&gt; to &lt;code&gt;x0462&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The provided test case is absolutely not exhaustive. It was primarily generated by Gemini, and I&amp;rsquo;ve only revised some grammar mistakes to ensure it works properly for LC-3 syntax. Feel free to add any additional test cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="3-data-structure-design"&gt;3. Data Structure Design&lt;/h3&gt;
&lt;h4 id="1-data-structure-for-folders-and-files"&gt;(1) Data Structure for Folders and Files&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Data Structure of Files in a Folder (linked list):&lt;/strong&gt;&lt;/p&gt;</description></item></channel></rss>